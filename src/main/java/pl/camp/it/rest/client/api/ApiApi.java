/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pl.camp.it.rest.client.api;

import pl.camp.it.rest.client.api.model.Book;
import pl.camp.it.rest.client.api.model.BookListResponse;
import pl.camp.it.rest.client.api.model.OrderDTO;
import pl.camp.it.rest.client.api.model.OrderListResponse;
import pl.camp.it.rest.client.api.model.OrderPositionListResponse;
import pl.camp.it.rest.client.api.model.OrderPositionResponseDTO;
import pl.camp.it.rest.client.api.model.SaveOrderRequest;
import pl.camp.it.rest.client.api.model.User;
import pl.camp.it.rest.client.api.model.UserRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-02T15:41:23.134488800+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "book-rest-controller", description = "the book-rest-controller API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/v1/book/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteBook",
        tags = { "book-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/book/{id}"
    )
    default ResponseEntity<Void> deleteBook(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/book/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getBookById",
        tags = { "book-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Book.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/book/{id}",
        produces = { "*/*" }
    )
    default ResponseEntity<Book> getBookById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"quantity\" : 1, \"author\" : \"author\", \"price\" : 6.027456183070403, \"isbn\" : \"isbn\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/book : getBooks
     * fajny endpoint do pobierania ksiazek
     *
     * @param pattern pattern w tytule lub autorze ktory bedzie wyszukiwany (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getBooks",
        summary = "getBooks",
        description = "fajny endpoint do pobierania ksiazek",
        tags = { "book-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = BookListResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/book",
        produces = { "*/*" }
    )
    default ResponseEntity<BookListResponse> getBooks(
        @Parameter(name = "pattern", description = "pattern w tytule lub autorze ktory bedzie wyszukiwany", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pattern", required = false) String pattern
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"bookList\" : [ { \"quantity\" : 1, \"author\" : \"author\", \"price\" : 6.027456183070403, \"isbn\" : \"isbn\", \"id\" : 0, \"title\" : \"title\" }, { \"quantity\" : 1, \"author\" : \"author\", \"price\" : 6.027456183070403, \"isbn\" : \"isbn\", \"id\" : 0, \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/order-position/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getById",
        tags = { "order-position-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OrderPositionResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/order-position/{id}",
        produces = { "*/*" }
    )
    default ResponseEntity<OrderPositionResponseDTO> getById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"quantity\" : 6, \"book\" : \"book\", \"id\" : 0, \"order\" : \"order\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/user/{loginOrId}
     *
     * @param loginOrId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getByLogin",
        tags = { "user-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/user/{loginOrId}",
        produces = { "*/*" }
    )
    default ResponseEntity<User> getByLogin(
        @Parameter(name = "loginOrId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("loginOrId") String loginOrId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"role\" : \"ADMIN\", \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"login\" : \"login\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/order-position
     *
     * @param orderId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getByOrderId",
        tags = { "order-position-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OrderPositionListResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/order-position",
        produces = { "*/*" }
    )
    default ResponseEntity<OrderPositionListResponse> getByOrderId(
        @NotNull @Parameter(name = "orderId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderId", required = true) Integer orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"orderList\" : [ { \"quantity\" : 6, \"book\" : \"book\", \"id\" : 0, \"order\" : \"order\" }, { \"quantity\" : 6, \"book\" : \"book\", \"id\" : 0, \"order\" : \"order\" } ] }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/order/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getOrderById",
        tags = { "order-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OrderDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/order/{id}",
        produces = { "*/*" }
    )
    default ResponseEntity<OrderDTO> getOrderById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"dateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"total\" : 6.027456183070403, \"orderPositions\" : [ \"orderPositions\", \"orderPositions\" ], \"id\" : 0, \"user\" : \"user\", \"status\" : \"NEW\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/order
     *
     * @param userId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getOrdersByUserId",
        tags = { "order-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OrderListResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/order",
        produces = { "*/*" }
    )
    default ResponseEntity<OrderListResponse> getOrdersByUserId(
        @NotNull @Parameter(name = "userId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"orderList\" : [ { \"dateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"total\" : 6.027456183070403, \"orderPositions\" : [ \"orderPositions\", \"orderPositions\" ], \"id\" : 0, \"user\" : \"user\", \"status\" : \"NEW\" }, { \"dateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"total\" : 6.027456183070403, \"orderPositions\" : [ \"orderPositions\", \"orderPositions\" ], \"id\" : 0, \"user\" : \"user\", \"status\" : \"NEW\" } ] }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/book
     *
     * @param book  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "saveBook",
        tags = { "book-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Book.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/book",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Book> saveBook(
        @Parameter(name = "Book", description = "", required = true) @Valid @RequestBody Book book
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"quantity\" : 1, \"author\" : \"author\", \"price\" : 6.027456183070403, \"isbn\" : \"isbn\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/order
     *
     * @param saveOrderRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "saveOrder",
        tags = { "order-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OrderDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/order",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<OrderDTO> saveOrder(
        @Parameter(name = "SaveOrderRequest", description = "", required = true) @Valid @RequestBody SaveOrderRequest saveOrderRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"dateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"total\" : 6.027456183070403, \"orderPositions\" : [ \"orderPositions\", \"orderPositions\" ], \"id\" : 0, \"user\" : \"user\", \"status\" : \"NEW\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/user
     *
     * @param userRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "saveUser",
        tags = { "user-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/user",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> saveUser(
        @Parameter(name = "UserRequest", description = "", required = true) @Valid @RequestBody UserRequest userRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"role\" : \"ADMIN\", \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"login\" : \"login\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/test1
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "test1",
        tags = { "test-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/test1",
        produces = { "*/*" }
    )
    default ResponseEntity<User> test1(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"role\" : \"ADMIN\", \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"login\" : \"login\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/test2/{param}
     *
     * @param param  (required)
     * @param a  (required)
     * @param header1  (required)
     * @param header2  (required)
     * @param user  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "test2",
        tags = { "test-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Book.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/test2/{param}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Book> test2(
        @Parameter(name = "param", description = "", required = true, in = ParameterIn.PATH) @PathVariable("param") String param,
        @NotNull @Parameter(name = "a", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "a", required = true) Integer a,
        @NotNull @Parameter(name = "header1", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "header1", required = true) String header1,
        @NotNull @Parameter(name = "header2", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "header2", required = true) String header2,
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"quantity\" : 1, \"author\" : \"author\", \"price\" : 6.027456183070403, \"isbn\" : \"isbn\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/test3
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "test3",
        tags = { "test-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Book.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/test3",
        produces = { "*/*" }
    )
    default ResponseEntity<Book> test3(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"quantity\" : 1, \"author\" : \"author\", \"price\" : 6.027456183070403, \"isbn\" : \"isbn\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/book/{id}
     *
     * @param id  (required)
     * @param book  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateBook",
        tags = { "book-rest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Book.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/book/{id}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Book> updateBook(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Book", description = "", required = true) @Valid @RequestBody Book book
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"quantity\" : 1, \"author\" : \"author\", \"price\" : 6.027456183070403, \"isbn\" : \"isbn\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
